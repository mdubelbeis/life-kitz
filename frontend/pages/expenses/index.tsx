import ExpenseForm from '@/components/expenses/ExpenseForm';
import ExpensesDisplay from '@/components/expenses/ExpensesDisplay';
import { Expense } from '@/pages/index';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

const ExpensesPage: React.FC = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [expenses, setExpenses] = useState<Expense[] | null>(null);
  const [newExpenseTitle, setNewExpenseTitle] = useState<string>('');
  const [newExpenseDescription, setNewExpenseDescription] =
    useState<string>('');
  const [newExpenseAmount, setNewExpenseAmount] = useState<number | ''>('');
  const router = useRouter();

  const getExpenses = async () => {
    try {
      const expenses_data = await fetch('http://127.0.0.1:8000/api/expenses/', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token').slice(1, -1)}`,
        },
      });

      const expenses_json = await expenses_data.json();
      const expenses = expenses_json;

      if (expenses) {
        setExpenses(expenses);
      } else {
        setExpenses(null);
      }
    } catch (error) {
      console.log(error + 'Error fetching data from /api/notes/');
    }
  };

  useEffect(() => {
    // Check if user is authenticated
    if (localStorage.getItem('token')) {
      setIsAuthenticated(true);
      getExpenses();
    } else {
      router.push('/login');
    }
  }, []);

  const handleNewExpense = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const newExpense = {
      title: newExpenseTitle,
      date: new Date().toISOString().slice(0, 10),
      amount: newExpenseAmount,
      description: newExpenseDescription,
    };

    try {
      const response = await fetch('http://127.0.0.1:8000/api/expenses/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('token').slice(1, -1)}`,
        },
        body: JSON.stringify(newExpense),
      });

      const data = await response.json();
      console.log(data);
      await getExpenses();
    } catch (error) {
      console.log(error + 'Error creating new Expense');
    }
    setNewExpenseTitle('');
    setNewExpenseDescription('');
    setNewExpenseAmount('');
  };

  return (
    <>
      <Head>
        <title>Life-Kitz | Expenses Kit</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {isAuthenticated ? (
        <section className="mx-auto flex w-11/12 max-w-6xl flex-col gap-10">
          <ExpenseForm
            newExpenseTitle={newExpenseTitle}
            newExpenseDescription={newExpenseDescription}
            newExpenseAmount={newExpenseAmount}
            setNewExpenseTitle={setNewExpenseTitle}
            setNewExpenseDescription={setNewExpenseDescription}
            handleNewExpense={handleNewExpense}
            setNewExpenseAmount={setNewExpenseAmount}
          />
          <ExpensesDisplay expenses={expenses} />
        </section>
      ) : (
        <p>Loading...</p>
      )}
    </>
  );
};

export default ExpensesPage;
